Searching Go code - gogrep
30 Aug 2018

Daniel Mart√≠
https://mvdan.cc

* Go code at different levels

- raw bytes
- lines
- lexer tokens
- syntax tree (AST)
- syntax tree with type info
- static single assignment (SSA) form

* Raw bytes

	{
		[...]
		if err != nil {
			return nil, err
		}
	}

--

	\tif err != nil {\n\t\treturn nil, err\n\t}\n

* Lines

	"	if err != nil {"
	"		return nil, err"
	"	}"

* Lexer tokens

	IF IDENT("err") NEQ IDENT("nil") LBRACE
	IDENT("return") IDENT("nil") COMMA IDENT("err")
	RBRACE

* Syntax tree

	IfStmt{
		Cond: BinaryExpr{
			X:  Ident{Name: "err"},
			Op: token.NEQ,
			Y:  Ident{Name: "nil"},
		},
		Body: BlockStmt{List: []Stmt{
			ReturnStmt{Results: []Expr{
				Ident{Name: "nil"},
				Ident{Name: "err"},
			}},
		}},
	}

* With type info

	TypeOf(Ident{Name: "err"}): builtin error
	TypeOf(Ident{Name: "nil"}): untyped nil

	TypeOf(err != nil): bool

- You can also get where err was declared

* Go code at different levels

- raw bytes
- lines ü°ê *grep*
- lexer tokens
- syntax tree (AST)
- syntax tree with type info
- static single assignment (SSA) form

mostly works thanks to gofmt (spaces count!)

* Plaintext

	$ git grep -n 'if err != nil {'
	load.go:38:             if err != nil {
	load.go:56:             if err != nil {
	load.go:116:    if err != nil {
	main.go:71:     if err != nil {
	main.go:141:    if err != nil {
	main.go:146:    if err != nil {
	main.go:156:    if err != nil {
	main.go:207:            if err != nil {
	main.go:324:    if err != nil {

* Complex searches

	if <x> != nil {
		return [...], <x>
	}

--

	if $x != nil {
		return $*_, $x
	}

Would match all of:

	if err != nil { return err }
	if err != nil { return nil, err }
	if err2 != nil { return nil, err2 }

* Go code at different levels

- raw bytes
- lines ü°ê *grep*
- lexer tokens
- syntax tree (AST)
- syntax tree with type info ü°ê *gogrep*
- static single assignment (SSA) form

* Multiple statements

	$*_, $x := $_
	if $x != nil {
		return $*_, $x
	}

--

	$ gogrep -x '$*_, err := $_; if err != nil { return $*_, $x }'
	expr_parse.go:20:2: toks, err := m.tokenize([]byte(expr)); if err != nil { return "", nil, fmt.Errorf("cannot tokenize expr: %v", err); }
	expr_parse.go:64:2: exprStr, offs, err := m.transformSource(expr); if err != nil { return nil, err; }
	expr_parse.go:296:3: wt, err := m.wildcard(t.pos, next); if err != nil { return nil, err; }
	expr_parse.go:343:2: toks, err := m.tokenize([]byte(src)); if err != nil { return nil, err; }
	expr_parse.go:373:3: rxStr, err := strconv.Unquote(t.lit); if err != nil { return nil, fmt.Errorf("%v: %v", t.pos, err); }
	expr_parse.go:403:3: typeExpr, err := parser.ParseExpr(typeStr); if err != nil { return nil, err; }
	expr_parse.go:443:2: n, err := strconv.Atoi(s[len(wildPrefix):]); if err != nil { return -1; }
	load.go:37:3: f, err := parser.ParseFile(l.fset, path, nil, parser.ParseComments); if err != nil { return err; }
	load.go:55:3: pkg, err := l.ctx.Import(path, l.wd, 0); if err != nil { return err; }
	main.go:139:2: cmds, paths, err := m.parseCmds(args); if err != nil { return err; }
	main.go:221:4: n, err := strconv.Atoi(cmd.src); if err != nil { return nil, nil, err; }
	main.go:227:4: m, err := m.parseAttrs(cmd.src); if err != nil { return nil, nil, fmt.Errorf("cannot parse mods: %v", err); }
	main.go:233:4: node, err := m.parseExpr(cmd.src); if err != nil { return nil, nil, err; }

* Filtering

What about finding the ones where we panic?

	$*_, $x := $_
	if $x != nil {
		// a panic somewhere
	}

--

	$ gogrep -x '$*_, err := $_; if err != nil { $*_ }' -g 'panic($*_)'
	match.go:653:3: pkg, err := m.stdImporter.Import(path); if err != nil { panic(fmt.Sprintf("findScope err: %v", err)); }
	write.go:36:3: f, err := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0); if err != nil { panic(err); }

* Negative filtering

What about finding the ones where we don't return?

	$*_, $x := $_
	if $x != nil {
		// missing return
	}

--

	$ gogrep -x '$*_, err := $_; if err != nil { $*_ }' -v 'return $*_'
	main.go:63:2: err := m.fromArgs(os.Args[1:]); if err != nil { fmt.Fprintln(os.Stderr, err); os.Exit(1); }
	match.go:653:3: pkg, err := m.stdImporter.Import(path); if err != nil { panic(fmt.Sprintf("findScope err: %v", err)); }
	write.go:36:3: f, err := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0); if err != nil { panic(err); }
	write_test.go:51:2: dir, err := ioutil.TempDir("", "gogrep-write"); if err != nil { t.Fatal(err); }
	write_test.go:81:3: gotBs, err := ioutil.ReadFile(path); if err != nil { t.Fatal(err); }

* Real use case‚Ñ¢

- Simplify HasPrefix with TrimPrefix

	if strings.HasPrefix(x, s) {
		x = x[len(s):]
	}

--

	x = strings.TrimPrefix(x, s)

.link https://staticcheck.io/docs/gosimple#S1017

	$ gogrep -x 'if strings.HasPrefix($x, $p) { $x = $x[len($p):] }'

* Real use case‚Ñ¢ #2

- golang/go#18625: compress/flate: Write() causes large and unshrinkable stack growth

	for i, v := range someArray {
		[...]
	}

--

	for i, v := range someArray[:] {
		[...]
	}

.link https://github.com/mdempsky/rangerdanger

* Real use case‚Ñ¢ #2 cont

	$ gogrep -x 'for $_, $_ := range $x { $*_ }' -x '$x' -a 'is(array)' std | grep -vE '_test|vendor/'
	archive/tar/reader.go:532:22: blk
	compress/flate/inflate.go:235:25: h.chunks
	crypto/elliptic/p224.go:154:20: minimal
	crypto/elliptic/p256_asm.go:340:20: p.xyz
	crypto/elliptic/p256_asm.go:341:3: p.xyz
	crypto/md5/md5.go:193:20: d.s
	crypto/sha1/sha1.go:229:20: d.h
	crypto/sha1/sha1.go:249:20: d.h
	crypto/tls/common.go:605:20: c.SessionTicketKey
	go/build/gc.go:123:21: [...]string{full, full + ".gox", pkgdir + "lib" + pkg + ".so", ...
	go/internal/gccgoimporter/importer.go:45:28: [...]string{pkgfullpath, pkgfullpath + ".gox", ...
	go/internal/gcimporter/gcimporter.go:73:22: pkgExts
	go/types/stmt.go:800:24: lhs
	go/types/stmt.go:848:24: lhs
	go/types/universe.go:75:20: aliases
	go/types/universe.go:99:20: predeclaredConsts
	image/gif/writer.go:28:20: log2Lookup
	image/jpeg/huffman.go:158:21: nCodes
	image/jpeg/reader.go:727:30: translations
	image/jpeg/writer.go:205:20: theHuffmanSpec

* Aggressive AST matching

- AST vs SSA

	if (a == b) { ... }          |      if a == b { ... }
	for _ = range x { ... }      |      for range x { ... }
	_, _ = f()                   |      f()
	var (a int)                  |      var a int
	var a int; a = f()           |      a := f()

--

	gogrep -x '~ var $_ int'

Would find *foo* in all of:

	var foo int
	var (foo int)
	var (foo, bar int)
	var (bar uint; foo int)

* Tradeoffs

	Simple, stupid                                                           Complex
	--------------------------------------------------------------------------------
	grep        literal AST matching         gogrep         ???          full linter

- Many commands/operations (range, filter, etc)
- Combine multiple commands
- Use type information

- Never reaching custom logic nor arbitrary code

* Code search in PMD

.link https://pmd.github.io/pmd-5.8.1/pmd-java/rules/java/basic.html#CollapsibleIfStatements

	//IfStatement[@Else='false']/Statement
	 /IfStatement[@Else='false']
	 |
	//IfStatement[@Else='false']/Statement
	 /Block[count(BlockStatement)=1]/BlockStatement
	  /Statement/IfStatement[@Else='false']

--

	if $_ {
		if $_ {
			$*_
		}
	}

* Bonus points: gofmt -r

	gofmt -r 'pattern -> replacement'

--

	gofmt -l -w -r 'strings.TrimPrefix(x, s) -> strings.TrimSuffix(x, s)'

- Pattern and replacement can only be expressions
- Only matches ASTs with variables
- Cannot compose commands to do complex queries

	gogrep -x 'if strings.HasPrefix($x, $p) { $x = $x[len($p):] }'
	       -s '$x = strings.TrimPrefix($x, $p)'
	
* Open questions

- What commands should be added?
- There are no "AND" and "OR" commands
- Allow more custom logic, like:
  - filter matches containing at least three return statements

--

Can a more powerful and generic tool exist?
